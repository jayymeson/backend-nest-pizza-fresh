// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
  output = "../db.pdf"
}

model Table {
  id     String @id @default(uuid())
  number Int    @unique

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  orders Order[]

  @@map("table")
}

model User {
  id String @id @default(uuid())
  nickname String @unique
  email String @unique
  password String
  age Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  orders Order[]
  favorites Favorite[]

  @@map("user")
}

model Product {
  id String @id @default(uuid())
  name String @unique
  description String
  price Float
  image String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  orders OrderProduct[]
  favorites Favorite[]

  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId String? @map("category_id ")

  @@map("product")
}

model Order {
  id String @id @default(uuid())

  user User @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String @map("user_id")

  table Table? @relation(fields: [tableId], references: [id], onDelete: SetNull)
  tableId String? @map("table_id")

  products OrderProduct[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("order")
}

model OrderProduct {
  id String @id @default(uuid())

  order Order @relation(fields: [orderId], references: [id])
  orderId String @map("order_id")

  product Product @relation(fields: [productId], references: [id])
  productId String @map("product_id")

  quantity Int
  description String

  @@unique([orderId, productId])
  @@map("order_product")
}

model Category {
  id String @id @default(uuid())
  name String @unique

  products Product[]
  @@map("category")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Favorite {
  id String @id @default(uuid())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  product Product @relation(fields: [productName], references: [name], onDelete: Cascade)
  productName String @map("product_name")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("favorite")
  @@unique([userId, productName])
}